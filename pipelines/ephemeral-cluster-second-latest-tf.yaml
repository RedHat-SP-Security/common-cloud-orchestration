---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ephemeral-cluster-nbde-tang-server-e2e-tests-pipeline
spec:
  description: |
    This pipeline automates the process of running end-to-end tests for NBDE tang-server
    using a Hypershift cluster. The pipeline provisions
    the Hypershift cluster, runs the tests in TF machine, collects artifacts,
    and deprovisions the Hypershift cluster.
  params:
    - name: SNAPSHOT
      description: 'The JSON string representing the snapshot of the application under test.'
      type: string
    - name: GIT_URL
      description: URL of the GIT repository that contains the tests.
      type: string
    - name: GIT_REF
      default: "main"
      description: Branch of the git repository used containing the tests
      type: string
    - name: KONFLUX_FMF_PLAN
      default: "/Plans/konflux_ci_cluster_Provisioned"
      type: string
      description: Plan which will be executed in tmt.
    - name: TIMEOUT
      default: "720"
      description: Set the timeout for the request in minutes. If the test takes longer than this, it will be terminated.
      type: string
    - name: ARCH
      default: "x86_64"
      description: Comma-separated list of architectures to run against.
      type: string
    - name: DISTRO
      default: "RHEL-9.3"
      type: string
      description: Context of OS which will be set to TF.
    - name: TESTING_FARM_API_URL
      default: https://api.dev.testing-farm.io/v0.1
      description: The testing-farm instance API to use
    - name: COMPOSE
      default: "RHEL-9.3.0-Nightly"
      description: Compose to use for the system-under-test.
      type: string
    - name: INDEX_OCP_VER
      default: "1"
      type: string
      description: Index which is used for setting release of OCP cluser.
  results:
    - name: TEST_OUTPUT
      value: "$(tasks.nbde-e2e-tests.results.TEST_OUTPUT)"
  tasks:
    - name: eaas-provision-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerKind
          value: PipelineRun
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - eaas-provision-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(steps.get-supported-versions.results.versions[$(params.INDEX_OCP_VER)])."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: "m5.large"
    - name: nbde-e2e-tests
      timeout: "5h"
      description: Task to run tests from service repository
      runAfter:
        - provision-cluster
      taskSpec:
        results:
          - description: Link to the Testing Farm result overview
            name: TEST_OUTPUT
        volumes:
          - name: credentials
            emptyDir: {}
          - name: testing-farm-secret
            secret:
              secretName: testing-farm-secret
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.eaas-provision-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: testing-farm-request
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: testing-farm-secret
                mountPath: "/etc/secrets"
                readOnly: true
            env:
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: TIMEOUT
                value: $(params.TIMEOUT)
              - name: SNAPSHOT
                value: $(params.SNAPSHOT)
              - name: GIT_URL
                value: $(params.GIT_URL)
              - name: GIT_REF
                value: $(params.GIT_REF)
              - name: KONFLUX_FMF_PLAN
                value: $(params.KONFLUX_FMF_PLAN)
              - name: TESTING_FARM_API_URL
                value: $(params.TESTING_FARM_API_URL)
              - name: COMPOSE
                value: $(params.COMPOSE)
              - name: DISTRO
                value: $(params.DISTRO)
              - name: ARCH
                value: $(params.ARCH)
            image: quay.io/testing-farm/cli:latest
            script: |
              #!/usr/bin/env bash
              echo "=====See KUBECONFIG content========"
              CONTENT=$(cat ${KUBECONFIG})
              echo "${CONTENT}"
              echo "=====See KUBECONFIG VAR========"
              echo "KUBECONFIG: ${KUBECONFIG}"
              echo "=====TF request========"
              export TESTING_FARM_API_TOKEN=$(cat /etc/secrets/testing-farm-token)
              REQUEST_CMD='testing-farm request \
                --environment SNAPSHOT="'$(echo ${SNAPSHOT} | base64 -w 0)'" \
                --environment KUBECONFIG_CONTENT="'$(cat ${KUBECONFIG} | base64 -w 0)'" \
                --git-url "'${GIT_URL}'" \
                --git-ref "'${GIT_REF}'" \
                --plan "'${KONFLUX_FMF_PLAN}'" \
                --compose "'${COMPOSE}'" \
                --arch "'${ARCH}'" \
                --timeout "'${TIMEOUT}'" \
                --context distro="'${DISTRO}'"'
              # Print the constructed command for debugging purposes
              echo "Executing command: $REQUEST_CMD "
              OUTPUT_FILE="tf_results.txt"
              eval "$REQUEST_CMD" | tee $OUTPUT_FILE
              ARTIFACTS_URL=$(grep 'artifacts' $OUTPUT_FILE | grep -o 'https://[^[:space:]]\+')
              if grep -q "tests failed" $OUTPUT_FILE; then
                echo "Test FAILED"
                TEST_OUTPUT_RESULT_PATH='{"result":"FAILURE","timestamp":"'"$(date -u +%s)"'","successes":0,"failures":1,"warnings":0,"note":"'"${ARTIFACTS_URL}"'"}'
                echo $TEST_OUTPUT_RESULT_PATH > $(results.TEST_OUTPUT.path)
                exit 1
              elif grep -q "tests passed" $OUTPUT_FILE; then
                echo "Test PASSED"
                TEST_OUTPUT_RESULT_PATH='{"result":"SUCCESS","timestamp":"'"$(date -u +%s)"'","successes":1,"failures":0,"warnings":0,"note":"'"${ARTIFACTS_URL}"'"}'
                echo $TEST_OUTPUT_RESULT_PATH > $(results.TEST_OUTPUT.path)
                exit 0
              elif grep -q "tests error" $OUTPUT_FILE; then
                echo "Test ERRORED"
                TEST_OUTPUT_RESULT_PATH='{"result":"ERROR","timestamp":"'"$(date -u +%s)"'","successes":0,"failures":1,"warnings":0,"note":"'"${ARTIFACTS_URL}"'"}'
                echo $TEST_OUTPUT_RESULT_PATH > $(results.TEST_OUTPUT.path)
                exit 1
              fi
